<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kps.dao.DataOutputDao">

<!-- 다중 결과값 처리를 위한 ResultMap -->
<resultMap id="tab1" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab2" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab3" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab4" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab5" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab6" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab7" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab8" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab9" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab10" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab11" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab12" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab13" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab14" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab15" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab16" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab17" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab18" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab19" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab20" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab21" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab22" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab23" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab24" type="com.kps.vo.LeadersBoardDataVO"></resultMap>
<resultMap id="tab25" type="com.kps.vo.LeadersBoardDataVO"></resultMap>

<!-- Query Start -->
	<select id="getEpolyRegistRate" resultType="com.kps.vo.RegistrationRateVO">
	/* dataMapper.getEpolyRegistRate, e-POLY 등록율 추출 , param: map, 2021-09-13, Mark, result:RegistrationRateVO **/
		DECLARE @QUERY_TYPE NCHAR(10) = #{registDataType},
				@NOW_LEARNING_YEAR_CODE NCHAR(4) = #{learningYearCode},
				@NOW_SEMESTER_GBN NCHAR(2) = #{termGbn},
				@NOW_SEARCH_DATE NCHAR(8) = #{learningYearCode} + #{searchMonth} + #{searchDay},
				@NOW_COURSE_CODE NVARCHAR(100) = '',
				@GRADE NCHAR(10) = #{grade}

		IF @GRADE = '5'
			SET @NOW_COURSE_CODE = '54'
		ELSE IF @GRADE = '6'
			SET @NOW_COURSE_CODE = '55'
		ELSE IF @GRADE = '7'
			SET @NOW_COURSE_CODE = '56'
		ELSE IF @GRADE = '7i'
			SET @NOW_COURSE_CODE = '598'
		ELSE IF @GRADE = 'GTi'
			SET @NOW_COURSE_CODE = '73'
		ELSE IF @GRADE = 'gr1'
			SET @NOW_COURSE_CODE = '58,89,99,135'
		ELSE IF @GRADE = 'gr2'
			SET @NOW_COURSE_CODE = '59,81,90,100,136'
		ELSE IF @GRADE = 'gr3'
			SET @NOW_COURSE_CODE = '60,82,91,101'
		ELSE IF @GRADE = 'gr4'
			SET @NOW_COURSE_CODE = '74,83,92,102'
		ELSE IF @GRADE = 'gr6' AND @NOW_SEMESTER_GBN = '01'
			SET @NOW_COURSE_CODE = '111,113,117,63,757'
		ELSE IF @GRADE = 'gr7' AND @NOW_SEMESTER_GBN = '01'
			SET @NOW_COURSE_CODE = '115,119,403,405'
		ELSE IF @GRADE = 'gr6' AND @NOW_SEMESTER_GBN = '02'
			SET @NOW_COURSE_CODE = '112,114,118,63,758'
		ELSE IF @GRADE = 'gr7' AND @NOW_SEMESTER_GBN = '02'
			SET @NOW_COURSE_CODE = '115,119'
		ELSE IF @GRADE = '' AND @NOW_SEMESTER_GBN = '01'
			SET @NOW_COURSE_CODE = '54,55,56,598,73,58,99,135,80,89,59,81,90,100,136,60,82,91,101,74,83,92,102,75,84,103,111,113,117,63,757,115,119'
		ELSE IF @GRADE = '' AND @NOW_SEMESTER_GBN = '02'
			SET @NOW_COURSE_CODE = '54,55,56,598,73,58,99,135,80,89,59,81,90,100,136,60,82,91,101,74,83,92,102,75,84,103,112,114,118,63,758,115,119'


		IF @QUERY_TYPE = 'Campus' AND '' = #{registCampusGbn}
		BEGIN
			SELECT	ROW_NUMBER() OVER(ORDER BY (SELECT 1)) AS ROW_NUM
					, JISA_CLIENT_NAME
					, A.CLIENT_NAME
					, A.ALL_COUNT
					, A.ENROLL_COUNT
					, REGISTER_ENROLL_COUNT
					, A.REST_COUNT
					, REGISTER_REST_COUNT
					, (CAST(A.ENROLL_COUNT AS INT) + CAST(A.REST_COUNT AS INT)) AS ALL_ENROLL_COUNT
					, (CAST(A.REGISTER_ENROLL_COUNT AS INT) + CAST(A.REGISTER_REST_COUNT AS INT)) AS ALL_REGISTER_COUNT
					,  CASE
						WHEN
							A.REGISTER_ENROLL_COUNT = 0
							THEN
								'0.00'
						WHEN
							A.ENROLL_COUNT = 0
							THEN
								'0.00'
						ELSE
						CONVERT(NUMERIC(5,2), ROUND(100. * CAST(A.REGISTER_ENROLL_COUNT AS INT) / CAST(A.ENROLL_COUNT AS INT), 2), 2)
					  END  AS ENROLL_RATE
					, CASE
						WHEN
							A.REST_COUNT = 0
							THEN
								'0.00'
						WHEN
							A.REGISTER_REST_COUNT = 0
							THEN
								'0.00'
						ELSE
						CONVERT(NUMERIC(5,2), ROUND(100. * CAST(A.REGISTER_REST_COUNT AS INT) / CAST(A.REST_COUNT AS INT), 2), 2)
					  END AS REST_ENROLL_RATE
					, CASE
						WHEN
							A.REGISTER_ENROLL_COUNT + A.REGISTER_REST_COUNT = 0
							THEN
								'0.00'
						WHEN
							A.ENROLL_COUNT + A.REST_COUNT = 0
							THEN
								'0.00'
						ELSE
						CONVERT(NUMERIC(5,2), ROUND(100. * CAST(CAST((CAST(A.REGISTER_ENROLL_COUNT AS INT) + CAST(A.REGISTER_REST_COUNT AS INT)) AS NCHAR(10)) AS INT) / CAST( CAST((CAST(A.ENROLL_COUNT AS INT) + CAST(A.REST_COUNT AS INT)) AS NCHAR(10)) AS INT), 2), 2)
					  END AS ALL_ENROLL_RATE
					, CASE
						WHEN
							A.REGISTER_ENROLL_COUNT + A.REGISTER_REST_COUNT = 0
							THEN
								'0.00'
						WHEN
							A.ENROLL_COUNT = 0
							THEN
								'0.00'
						ELSE
						CONVERT(NUMERIC(5,2), ROUND(100. * CAST(CAST((CAST(A.REGISTER_ENROLL_COUNT AS INT) + CAST(A.REGISTER_REST_COUNT AS INT)) AS NCHAR(10)) AS INT) / CAST(A.ENROLL_COUNT AS INT), 2), 2)
					  END AS EXISTING_ENROLL_RATE
			FROM	(
						SELECT
							A.JISA_CLIENT_NAME,
							A.CLIENT_CODE,
							A.CLIENT_NAME,
							SUM(A.ALL_COUNT) ALL_COUNT,
							SUM(A.ENROLL_COUNT) ENROLL_COUNT,
							SUM(A.REGISTER_ENROLL_COUNT) REGISTER_ENROLL_COUNT,
							SUM(A.REST_COUNT) REST_COUNT,
							SUM(A.REGISTER_REST_COUNT) REGISTER_REST_COUNT,
							SUM(A.REGISTER_COUNT) REGISTER_COUNT,
							SUM(A.TARGET_COUNT) TARGET_COUNT,
							CASE WHEN ((SUM(A.TARGET_COUNT)*1.0 - SUM(A.TARGET_REST_COUNT)*1.0)) = 0 THEN 0
								ELSE ROUND(SUM(A.REGISTER_COUNT)*1.0 / (SUM(A.TARGET_COUNT)*1.0 - SUM(A.TARGET_REST_COUNT)*1.0)*100,2)
							  END REGISTER_PER
						FROM (
									SELECT
										CASE WHEN G2_KEMS.dbo.FN_CLA_GET_CLIENT_JISA_NAME(B.CLIENT_CODE, 'KR','N') IS NOT NULL
													THEN '직영'
													ELSE '분원'
												END JISA_CLIENT_NAME,
										B.CLIENT_CODE,
										G2_KEMS.DBO.FN_CLA_GET_CLIENT_NAME(B.CLIENT_CODE,'KR','N') CLIENT_NAME,
										A.DAY_MNG_CODE, A.LEARNING_YEAR_CODE, A.SEMESTER_GBN ,B.YEAR_MONTH_DAY
										, SUM(A.ALL_COUNT) ALL_COUNT,
										SUM(A.ENROLL_COUNT) ENROLL_COUNT,
										SUM(A.REST_COUNT) REST_COUNT,
										SUM(A.TARGET_REST_COUNT) TARGET_REST_COUNT,
										SUM(A.TARGET_COUNT) TARGET_COUNT,
										SUM(A.REGISTER_COUNT) REGISTER_COUNT,
										SUM(A.REGISTER_ENROLL_COUNT) REGISTER_ENROLL_COUNT,
										SUM(A.REGISTER_REST_COUNT) REGISTER_REST_COUNT

									FROM ARDB.DW.DBO.TB_EPA_PAY_STASTICS A
										INNER JOIN ARDB.DW.dBO.TB_BIA_MNG_DATE B
											ON A.DAY_MNG_CODE = B.DAY_MNG_CODE
											AND B.YEAR_MONTH_DAY = @NOW_SEARCH_DATE
									WHERE A.LEARNING_YEAR_CODE = @NOW_LEARNING_YEAR_CODE
											AND A.SEMESTER_GBN = @NOW_SEMESTER_GBN
											AND B.CLIENT_CODE NOT IN ('1610004')
											AND A.COURSE_CODE IN (SELECT VALUE FROM G2_KEMS.DBO.FN_COM_SPLIT(@NOW_COURSE_CODE, ','))
									GROUP BY B.YEAR_MONTH_DAY, B.CLIENT_CODE,A.DAY_MNG_CODE, A.LEARNING_YEAR_CODE, A.SEMESTER_GBN

								)A
							WHERE A.JISA_CLIENT_NAME = #{registCampusGbn}
							GROUP BY A.JISA_CLIENT_NAME, A.CLIENT_CODE, A.CLIENT_NAME
						) A

			ORDER BY JISA_CLIENT_NAME, A.REGISTER_PER DESC
		END

		ELSE IF @QUERY_TYPE = 'Raw'
		BEGIN
			SELECT	ROW_NUMBER() OVER(ORDER BY (SELECT 1)) AS ROW_NUM
					, A.COURSE_CODE
					,(SELECT CODE_NAME
					  FROM G2_KEMS.DBO.TB_SYD_LOCALE_INPUT
					  WHERE LOCALE_CODE = (
					  	SELECT N_LOCALE_CODE
					  	FROM G2_LCMS.DBO.TB_MTA_COURSE
					  	WHERE COURSE_CODE = A.COURSE_CODE
					  )
					 ) AS COURSE_NAME
					, CASE WHEN
						(SELECT CHARINDEX('K', (SELECT GRADE_GBN
												 FROM G2_LCMS.DBO.TB_MTA_COURSE
												WHERE COURSE_CODE = A.COURSE_CODE)
						)) &gt; 0
					 THEN
						(SELECT SUBSTRING((SELECT GRADE_GBN
						 FROM G2_LCMS.DBO.TB_MTA_COURSE
						 WHERE COURSE_CODE = A.COURSE_CODE),2,2)) + '세'
					 WHEN
						(SELECT GRADE_GBN
						 FROM G2_LCMS.DBO.TB_MTA_COURSE
						 WHERE COURSE_CODE = A.COURSE_CODE) = '7I'
					 THEN
						'7세'
					 ELSE
					 (SELECT SUBSTRING((SELECT GRADE_GBN
						 FROM G2_LCMS.DBO.TB_MTA_COURSE
						 WHERE COURSE_CODE = A.COURSE_CODE),2,2)) + '학년'
					END
					   AS GRADE_GBN
					, A.ALL_COUNT
					, A.ENROLL_COUNT
					, REGISTER_ENROLL_COUNT
					, A.REST_COUNT
					, REGISTER_REST_COUNT
					, (CAST(A.ENROLL_COUNT AS INT) + CAST(A.REST_COUNT AS INT)) AS ALL_ENROLL_COUNT
					, (CAST(A.REGISTER_ENROLL_COUNT AS INT) + CAST(A.REGISTER_REST_COUNT AS INT)) AS ALL_REGISTER_COUNT
					, CASE
						WHEN
							A.REGISTER_ENROLL_COUNT = 0
							THEN
								'0.00'
						WHEN
							A.ENROLL_COUNT = 0
							THEN
								'0.00'
						ELSE
						CONVERT(NUMERIC(5,2), ROUND(100. * CAST(A.REGISTER_ENROLL_COUNT AS INT) / CAST(A.ENROLL_COUNT AS INT), 2), 2)
					  END  AS ENROLL_RATE
					, CASE
						WHEN
							A.REST_COUNT = 0
							THEN
								'0.00'
						WHEN
							A.REGISTER_REST_COUNT = 0
							THEN
								'0.00'
						ELSE
						CONVERT(NUMERIC(5,2), ROUND(100. * CAST(A.REGISTER_REST_COUNT AS INT) / CAST(A.REST_COUNT AS INT), 2), 2)
					  END AS REST_ENROLL_RATE
					, CASE
						WHEN
							A.REGISTER_ENROLL_COUNT + A.REGISTER_REST_COUNT = 0
							THEN
								'0.00'
						WHEN
							A.ENROLL_COUNT + A.REST_COUNT = 0
							THEN
								'0.00'
						ELSE
						CONVERT(NUMERIC(5,2), ROUND(100. * CAST(CAST((CAST(A.REGISTER_ENROLL_COUNT AS INT) + CAST(A.REGISTER_REST_COUNT AS INT)) AS NCHAR(10)) AS INT) / CAST( CAST((CAST(A.ENROLL_COUNT AS INT) + CAST(A.REST_COUNT AS INT)) AS NCHAR(10)) AS INT), 2), 2)
					  END AS ALL_ENROLL_RATE
					, CASE
						WHEN
							A.REGISTER_ENROLL_COUNT + A.REGISTER_REST_COUNT = 0
							THEN
								'0.00'
						WHEN
							A.ENROLL_COUNT = 0
							THEN
								'0.00'
						ELSE
						CONVERT(NUMERIC(5,2), ROUND(100. * CAST(CAST((CAST(A.REGISTER_ENROLL_COUNT AS INT) + CAST(A.REGISTER_REST_COUNT AS INT)) AS NCHAR(10)) AS INT) / CAST(A.ENROLL_COUNT AS INT), 2), 2)
					  END AS EXISTING_ENROLL_RATE
			FROM	(
						SELECT

							A.COURSE_CODE,
							SUM(A.ALL_COUNT) ALL_COUNT,
							SUM(A.ENROLL_COUNT) ENROLL_COUNT,
							SUM(A.REGISTER_ENROLL_COUNT) REGISTER_ENROLL_COUNT,
							SUM(A.REST_COUNT) REST_COUNT,
							SUM(A.REGISTER_REST_COUNT) REGISTER_REST_COUNT,
							SUM(A.REGISTER_COUNT) REGISTER_COUNT,
							SUM(A.TARGET_COUNT) TARGET_COUNT,
							CASE WHEN ((SUM(A.TARGET_COUNT)*1.0 - SUM(A.TARGET_REST_COUNT)*1.0)) = 0 THEN 0
								ELSE ROUND(SUM(A.REGISTER_COUNT)*1.0 / (SUM(A.TARGET_COUNT)*1.0 - SUM(A.TARGET_REST_COUNT)*1.0)*100,2)
							  END REGISTER_PER
						FROM (
									SELECT
										A.COURSE_CODE,
										A.DAY_MNG_CODE, A.LEARNING_YEAR_CODE, A.SEMESTER_GBN ,B.YEAR_MONTH_DAY
										, SUM(A.ALL_COUNT) ALL_COUNT,
										SUM(A.ENROLL_COUNT) ENROLL_COUNT,
										SUM(A.REST_COUNT) REST_COUNT,
										SUM(A.TARGET_REST_COUNT) TARGET_REST_COUNT,
										SUM(A.TARGET_COUNT) TARGET_COUNT,
										SUM(A.REGISTER_COUNT) REGISTER_COUNT,
										SUM(A.REGISTER_ENROLL_COUNT) REGISTER_ENROLL_COUNT,
										SUM(A.REGISTER_REST_COUNT) REGISTER_REST_COUNT
									FROM ARDB.DW.DBO.TB_EPA_PAY_STASTICS A
										INNER JOIN ARDB.DW.dBO.TB_BIA_MNG_DATE B
											ON A.DAY_MNG_CODE = B.DAY_MNG_CODE AND B.YEAR_MONTH_DAY = @NOW_SEARCH_DATE
									WHERE A.LEARNING_YEAR_CODE = @NOW_LEARNING_YEAR_CODE
											AND A.SEMESTER_GBN = @NOW_SEMESTER_GBN
											AND CLIENT_CODE NOT IN ('1610004')
									GROUP BY B.YEAR_MONTH_DAY, B.CLIENT_CODE,A.DAY_MNG_CODE, A.LEARNING_YEAR_CODE, A.SEMESTER_GBN ,COURSE_CODE

								)A
							GROUP BY A.COURSE_CODE
						) A
			WHERE A.COURSE_CODE in (SELECT VALUE FROM G2_KEMS.DBO.FN_COM_SPLIT('54,55,56,598,73,58,99,135,80,89,59,81,90,100,136,60,82,91,101,74,83,92,102,75,84,103,112,114,118,63,757,758,115,119',','))
			ORDER BY A.COURSE_CODE
		END
		ELSE IF '' = #{registCampusGbn}
		BEGIN
			SELECT	ROW_NUMBER() OVER(ORDER BY (SELECT 1)) AS ROW_NUM
					, JISA_CLIENT_NAME
					, A.CLIENT_NAME
					, A.ALL_COUNT
					, A.ENROLL_COUNT
					, REGISTER_ENROLL_COUNT
					, A.REST_COUNT
					, REGISTER_REST_COUNT
					, (CAST(A.ENROLL_COUNT AS INT) + CAST(A.REST_COUNT AS INT)) AS ALL_ENROLL_COUNT
					, (CAST(A.REGISTER_ENROLL_COUNT AS INT) + CAST(A.REGISTER_REST_COUNT AS INT)) AS ALL_REGISTER_COUNT
					,  CASE
						WHEN
							A.REGISTER_ENROLL_COUNT = 0
							THEN
								'0.00'
						WHEN
							A.ENROLL_COUNT = 0
							THEN
								'0.00'
						ELSE
						CONVERT(NUMERIC(5,2), ROUND(100. * CAST(A.REGISTER_ENROLL_COUNT AS INT) / CAST(A.ENROLL_COUNT AS INT), 2), 2)
					  END  AS ENROLL_RATE
					, CASE
						WHEN
							A.REST_COUNT = 0
							THEN
								'0.00'
						WHEN
							A.REGISTER_REST_COUNT = 0
							THEN
								'0.00'
						ELSE
						CONVERT(NUMERIC(5,2), ROUND(100. * CAST(A.REGISTER_REST_COUNT AS INT) / CAST(A.REST_COUNT AS INT), 2), 2)
					  END AS REST_ENROLL_RATE
					, CASE
						WHEN
							A.REGISTER_ENROLL_COUNT + A.REGISTER_REST_COUNT = 0
							THEN
								'0.00'
						WHEN
							A.ENROLL_COUNT + A.REST_COUNT = 0
							THEN
								'0.00'
						ELSE
						CONVERT(NUMERIC(5,2), ROUND(100. * CAST(CAST((CAST(A.REGISTER_ENROLL_COUNT AS INT) + CAST(A.REGISTER_REST_COUNT AS INT)) AS NCHAR(10)) AS INT) / CAST( CAST((CAST(A.ENROLL_COUNT AS INT) + CAST(A.REST_COUNT AS INT)) AS NCHAR(10)) AS INT), 2), 2)
					  END AS ALL_ENROLL_RATE
					, CASE
						WHEN
							A.REGISTER_ENROLL_COUNT + A.REGISTER_REST_COUNT = 0
							THEN
								'0.00'
						WHEN
							A.ENROLL_COUNT = 0
							THEN
								'0.00'
						ELSE
						CONVERT(NUMERIC(5,2), ROUND(100. * CAST(CAST((CAST(A.REGISTER_ENROLL_COUNT AS INT) + CAST(A.REGISTER_REST_COUNT AS INT)) AS NCHAR(10)) AS INT) / CAST(A.ENROLL_COUNT AS INT), 2), 2)
					  END AS EXISTING_ENROLL_RATE
			FROM	(
						SELECT
							A.JISA_CLIENT_NAME,
							A.CLIENT_CODE,
							A.CLIENT_NAME,
							SUM(A.ALL_COUNT) ALL_COUNT,
							SUM(A.ENROLL_COUNT) ENROLL_COUNT,
							SUM(A.REGISTER_ENROLL_COUNT) REGISTER_ENROLL_COUNT,
							SUM(A.REST_COUNT) REST_COUNT,
							SUM(A.REGISTER_REST_COUNT) REGISTER_REST_COUNT,
							SUM(A.REGISTER_COUNT) REGISTER_COUNT,
							SUM(A.TARGET_COUNT) TARGET_COUNT,
							CASE WHEN ((SUM(A.TARGET_COUNT)*1.0 - SUM(A.TARGET_REST_COUNT)*1.0)) = 0 THEN 0
								ELSE ROUND(SUM(A.REGISTER_COUNT)*1.0 / (SUM(A.TARGET_COUNT)*1.0 - SUM(A.TARGET_REST_COUNT)*1.0)*100,2)
							  END REGISTER_PER
						FROM (
									SELECT
										CASE WHEN G2_KEMS.dbo.FN_CLA_GET_CLIENT_JISA_NAME(B.CLIENT_CODE, 'KR','N') IS NOT NULL
													THEN '직영'
													ELSE '분원'
												END JISA_CLIENT_NAME,
										B.CLIENT_CODE,
										G2_KEMS.DBO.FN_CLA_GET_CLIENT_NAME(B.CLIENT_CODE,'KR','N') CLIENT_NAME,
										A.DAY_MNG_CODE, A.LEARNING_YEAR_CODE, A.SEMESTER_GBN ,B.YEAR_MONTH_DAY
										, SUM(A.ALL_COUNT) ALL_COUNT,
										SUM(A.ENROLL_COUNT) ENROLL_COUNT,
										SUM(A.REST_COUNT) REST_COUNT,
										SUM(A.TARGET_REST_COUNT) TARGET_REST_COUNT,
										SUM(A.TARGET_COUNT) TARGET_COUNT,
										SUM(A.REGISTER_COUNT) REGISTER_COUNT,
										SUM(A.REGISTER_ENROLL_COUNT) REGISTER_ENROLL_COUNT,
										SUM(A.REGISTER_REST_COUNT) REGISTER_REST_COUNT

									FROM ARDB.DW.DBO.TB_EPA_PAY_STASTICS A
										INNER JOIN ARDB.DW.dBO.TB_BIA_MNG_DATE B
											ON A.DAY_MNG_CODE = B.DAY_MNG_CODE
											AND B.YEAR_MONTH_DAY = @NOW_SEARCH_DATE
									WHERE A.LEARNING_YEAR_CODE = @NOW_LEARNING_YEAR_CODE
											AND A.SEMESTER_GBN = @NOW_SEMESTER_GBN
											AND B.CLIENT_CODE NOT IN ('1610004')
											AND A.COURSE_CODE IN (SELECT VALUE FROM G2_KEMS.DBO.FN_COM_SPLIT(@NOW_COURSE_CODE, ','))
									GROUP BY B.YEAR_MONTH_DAY, B.CLIENT_CODE,A.DAY_MNG_CODE, A.LEARNING_YEAR_CODE, A.SEMESTER_GBN

								)A
							GROUP BY A.JISA_CLIENT_NAME, A.CLIENT_CODE, A.CLIENT_NAME
						) A

			ORDER BY JISA_CLIENT_NAME, A.REGISTER_PER DESC
		END
	</select>
	<select id="getEpolyPreRegistData" resultType="com.kps.vo.PreRegistDataVO">
	DECLARE @SEARCH_DATE NCHAR(20) = #{learningYearCode} + '-' + #{searchMonth} + '-' + #{searchDay};
	SELECT
		ROW_NUMBER() OVER(ORDER BY (SELECT 1)) AS ROW_NUM
	    , (SELECT CODE_NAME
	    	FROM G2_KEMS.DBO.TB_SYD_LOCALE_INPUT
			WHERE LOCALE_CODE = (
				SELECT N_LOCALE_CODE
				FROM G2_KEMS.DBO.TB_CLA_CLIENT
				WHERE CLIENT_CODE = VSS.CLIENT_CODE
			  )
			  AND
			  	LANG_CODE = 'KR'
		) AS CLIENT_NAME
		, (SELECT G2_KEMS.dbo.FN_SYD_GET_LOCALE_VALUE(X.N_LOCALE_CODE, 'KR')
			FROM G2_LCMS.DBO.TB_MTA_COURSE X
			WHERE X.COURSE_CODE = G2_KCMS.dbo.FN_STA_GET_STUDENT_STATUS_LEVEL(VSS.CLIENT_MEM_CODE, @SEARCH_DATE, VSS.STUDENT_STT_BRN) ) AS COURSE_NAME
	   	, VSS.MEMBER_CODE AS MEMBER_CODE
	   	, (SELECT CODE_NAME
	      FROM G2_KEMS.DBO.TB_SYD_LOCALE_INPUT
		  WHERE LOCALE_CODE = (
					SELECT N_LOCALE_CODE
					FROM G2_KEMS.DBO.TB_MBA_MEMBER
					WHERE MEMBER_CODE = VSS.MEMBER_CODE
				)
			AND
				LANG_CODE = 'KR'
		) AS MEMBER_KR_NAME
		, (SELECT CODE_NAME
	      FROM G2_KEMS.DBO.TB_SYD_LOCALE_INPUT
		  WHERE LOCALE_CODE = (
					SELECT N_LOCALE_CODE
					FROM G2_KEMS.DBO.TB_MBA_MEMBER
					WHERE MEMBER_CODE = VSS.MEMBER_CODE
				)
			AND
				LANG_CODE = 'EN'
		) AS MEMBER_EN_NAME
	   	, VSS.BIRTHDAY_YMD
	   	,CASE WHEN VSS.STUDENT_STT_CODE = '23'
	   			THEN '수강대기'
	   		  WHEN VSS.STUDENT_STT_CODE IN ('31','32','33','34')
	   			THEN '재학'
	   		  WHEN VSS.STUDENT_STT_CODE = '41'
	   			THEN '일반휴학'
			  ELSE '장기휴학' END STUDENT_STT
	   	, CASE
			WHEN SUM(CONVERT(INT, PAY.PAYMENT_STT)) IS NULL THEN '미등록'
			ELSE '등록'
		END REGIST_YN
		, CASE
			WHEN PAY.PAYMENT_DATE IS NULL THEN '-'
			ELSE CONVERT(varchar, PAY.PAYMENT_DATE, 120)
		END REGIST_DATE
		, PAY.SALE_PRD_NAME AS PRODUCT_NAME
		, VSS.MOTHER_HANDPHONE_NO AS PHONE_NO
	FROM  G2_KCMS.dbo.VW_STA_STUDENT VSS
	LEFT JOIN (
		SELECT DISTINCT
			TFP.MEMBER_CODE
			,TFP.PAYMENT_STT
			,TFP.REFUND_STT
			,TFP.PAYMENT_DATE
			,TFP.PAYMENT_TOT_CODE
			,(SELECT DISTINCT C.SALE_PRD_NAME + ', '
					FROM G3_LMS_EPOLY.dbo.TB_PRC_PAYMENT_PRODUCT A WITH(NOLOCK)
						INNER JOIN G2_KEMS.dbo.TB_FAE_PAYMENT B WITH(NOLOCK)
							ON A.PAYMENT_TOT_CODE = B.PAYMENT_TOT_CODE
						INNER JOIN G3_LMS_EPOLY.dbo.TB_PRB_SALES_PRODUCT C WITH(NOLOCK)
							ON A.SALE_PRD_ID = C.SALE_PRD_ID
						INNER JOIN G3_HOMEPAGE.dbo.TB_WEB_MEMBER_PARENT_STUDENT D WITH(NOLOCK)
							ON A.MEMBER_CODE = D.STUDENT_MEMBER_CODE
					WHERE
						B.REFUND_STT != '02'
						AND B.PAYMENT_STT = '02'
						AND A.MEMBER_CODE = TWMPS.STUDENT_MEMBER_CODE
						AND A.PAYMENT_TOT_CODE = TPPP.PAYMENT_TOT_CODE
						<!-- AND C.SALE_PRD_NAME LIKE #{learningYearCode} + '년 ' +  #{semesterGbn} + '%' -->
						AND C.LEARNING_YEAR_CODE = #{learningYearCode}
						AND C.TERM_GBN = '0' + #{semesterGbn}
						FOR XML PATH('')
				) SALE_PRD_NAME
			,TWMPS.STUDENT_MEMBER_CODE
		FROM
			G2_KEMS.dbo.TB_FAE_PAYMENT TFP  WITH (NOLOCK)
			, G3_LMS_EPOLY.dbo.TB_PRC_PAYMENT_PRODUCT TPPP  WITH (NOLOCK)
			, G3_LMS_EPOLY.dbo.TB_PRB_SALES_PRODUCT TPSP   WITH (NOLOCK)
			, G3_HOMEPAGE.dbo.TB_WEB_MEMBER_PARENT_STUDENT TWMPS  WITH (NOLOCK)
		WHERE
			TFP.PAYMENT_TOT_CODE = TPPP.PAYMENT_TOT_CODE
			AND TPPP.SALE_PRD_ID = TPSP.SALE_PRD_ID
			AND TPPP.MEMBER_CODE = TWMPS.STUDENT_MEMBER_CODE
			<!-- AND TPSP.SALE_PRD_NAME LIKE #{learningYearCode} + '년 ' +  #{semesterGbn} + '%' -->
			AND TPSP.LEARNING_YEAR_CODE = #{learningYearCode}
			AND TPSP.TERM_GBN = '0' + #{semesterGbn}
			AND TFP.MEMBER_CODE = TWMPS.PARENT_MEMBER_CODE
			AND TFP.REGIST_DATE &lt;= @SEARCH_DATE
			AND TFP.REFUND_STT != '02'
			AND TFP.PAYMENT_STT = '02'
		)PAY
		ON VSS.MEMBER_CODE = PAY.STUDENT_MEMBER_CODE

		LEFT JOIN
			G2_KEMS.dbo.TB_FAE_REFUND TFR
				ON PAY.PAYMENT_TOT_CODE = TFR.PAYMENT_TOT_CODE

	WHERE 1=1
		AND VSS.CLIENT_CODE IN (
			SELECT A.CLIENT_CODE
			FROM G2_KEMS.dbo.TB_CLA_CLIENT A WITH(NOLOCK)
				INNER JOIN G2_KEMS.DBO.TB_AMB_CAMPUS_CONFIG B WITH(NOLOCK)
					ON A.CLIENT_CODE = B.CLIENT_CODE
			WHERE A.CONTRACT_STT = 'NM'
			 AND	B.CAMPUS_GBN IN ('MA','FA')
		)
		AND	VSS.CLIENT_CODE NOT IN ('1610004','2010001','0609002','2110001','1210002','0508003','1301003')
		AND (SELECT A.STUDENT_STT_CODE
			  FROM (
				SELECT TOP 1 STUDENT_STT_CODE
				  FROM G2_KEMS.DBO.TB_CLB_STUDENT_STATUS_LOG A WITH (NOLOCK)
				 WHERE A.CLIENT_MEM_CODE = VSS.CLIENT_MEM_CODE
					   AND @SEARCH_DATE BETWEEN A.STATUS_APP_DATE AND A.STATUS_END_DATE
					   AND A.DELETE_YN = 'N'
				 ORDER BY A.STATUS_SEQ DESC
			) A) IN ('23','31','32','33','34','41','42')
		<!-- AND VSS.MEMBER_CODE = '20080779' -->
	GROUP BY
		VSS.CLIENT_CODE
		, VSS.MEMBER_CODE
		, FINAL_CRS_CODE
		, PAY.REFUND_STT
		, PAYMENT_DATE
		, VSS.CLIENT_MEM_CODE
		, VSS.STUDENT_STT_BRN
		, VSS.BIRTHDAY_YMD
	    , VSS.RETURNEE_YN
	    , VSS.MOTHER_HANDPHONE_NO
	    , VSS.ZIP_NO
		, VSS.ADDRESS
		, VSS.STUDENT_STT_CODE
		, TFR.REFUND_DECISION_DTTM
		, PAY.SALE_PRD_NAME
	ORDER BY CLIENT_CODE
	</select>







































































	<select id="getLeadersBoardRawData" resultType="String">
	DECLARE @LEARNING_YEAR_CODE VARCHAR(50) = '2020';
	DECLARE @TERM_GBN VARCHAR(50) = '02';
	DECLARE @ROUND INT = 3;
	DECLARE @END_DATE VARCHAR(50) = '2021-01-17'

	SELECT ROW_NUMBER() OVER(ORDER BY (SELECT 1)) AS ROW_NUM, * , (A.POINT - B.LAST_POINT)  AS INCREASE_POINT
	FROM(
	SELECT
		DISTINCT
		 POINT1031.MEMBER_CODE
		, POINT1031.COURSE_CODE
		,(SELECT G2_KEMS.dbo.FN_SYD_GET_LOCALE_VALUE(N_LOCALE_CODE, 'KR') AS CODE_NAME FROM G2_LCMS.dbo.TB_MTA_COURSE WHERE  COURSE_CODE =POINT1031.COURSE_CODE) AS COURSE_NAME
		, POINT1031.CLIENT_EN_NAME
		, POINT1031.KR_MEMBER_NAME
		, POINT1031.EN_MEMBER_NAME
		, POINT1031.POINT
	FROM TB_INB_POINT_STATISTIC POINT1031
	WHERE 1=1
		AND POINT1031.LEARNING_YEAR_CODE = @LEARNING_YEAR_CODE
		AND POINT1031.TERM_GBN = @TERM_GBN
		AND POINT1031.ROUND = @ROUND
		AND POINT1031.FIRST_REG_DTTM &lt; @END_DATE
	)A
	INNER JOIN(
		SELECT DISTINCT POINT1031.MEMBER_CODE, POINT1031.COURSE_CODE, POINT1031.POINT AS LAST_POINT
		FROM TB_INB_POINT_STATISTIC POINT1031
		WHERE 1=1
			AND POINT1031.LEARNING_YEAR_CODE = @LEARNING_YEAR_CODE
			AND POINT1031.TERM_GBN = @TERM_GBN
			AND POINT1031.ROUND = @ROUND - 1
	)B
		ON A.MEMBER_CODE = B.MEMBER_CODE
			AND A.COURSE_CODE = B.COURSE_CODE

	ORDER BY A.COURSE_CODE ASC, POINT  DESC
	</select>

	<select id="getNewLeadersBoardPoint" resultMap="tab1,tab2,tab3,tab4,tab5,tab6,tab7,tab8,tab9,tab10,tab11,tab12,tab13,tab14,tab15,tab16,tab17,tab18,tab19,tab20,tab21,tab22,tab23,tab24,tab25">
	DECLARE @TAGET_MEMBER NVARCHAR(10);
	DECLARE @TARGET_DATA TABLE(IDX INT IDENTITY(1,1),  COURSE_CODE NVARCHAR(10));

	DECLARE
		@LOOP_IDX INT
		, @LOOP_COURSE_CODE NVARCHAR(10)
		, @TOTAL_COUNT INT
		, @LEARNING_YEAR_CODE VARCHAR(50) = #{learningYearCode}
		, @TERM_GBN VARCHAR(50) = #{termGbn}
		, @ROUND INT = #{round}
		, @CLIENT_EN_NAME VARCHAR(50) = #{clientEnName};


	INSERT @TARGET_DATA (COURSE_CODE)
		SELECT COURSE_CODE
		FROM G3_LMS_EPOLY.dbo.TB_INB_POINT_STATISTIC
		WHERE	LEARNING_YEAR_CODE = #{learningYearCode}
		  AND	TERM_GBN = #{termGbn}
		GROUP BY COURSE_CODE

	SELECT @TOTAL_COUNT = COUNT(*)
	FROM @TARGET_DATA

	  SET @LOOP_IDX = 0

	 WHILE @LOOP_IDX &lt; @TOTAL_COUNT
	 BEGIN

		SET @LOOP_IDX = @LOOP_IDX + 1

		SET @LOOP_COURSE_CODE = (SELECT COURSE_CODE
		  FROM @TARGET_DATA
		WHERE IDX  = @LOOP_IDX)

		IF(@CLIENT_EN_NAME = '')
		BEGIN
				SELECT TOP 10 * FROM(
					SELECT DISTINCT
						A.MEMBER_CODE
						, A.RANK AS ROW_NO
						, RANK() OVER (PARTITION BY COURSE_CODE ORDER BY A.RANK ASC) AS RANK
						, A.KR_MEMBER_NAME
						, A.EN_MEMBER_NAME
						, A.POINT
						,  A.CLIENT_EN_NAME
						,  A.LEARNING_YEAR_CODE
						, A.TERM_GBN
						, A.COURSE_CODE
						, A.ROUND
						,(SELECT G2_KEMS.dbo.FN_SYD_GET_LOCALE_VALUE(N_LOCALE_CODE, 'KR') AS CODE_NAME
							FROM G2_LCMS.dbo.TB_MTA_COURSE
						   WHERE  COURSE_CODE = A.COURSE_CODE) AS COURSE_NAME
				FROM G3_LMS_EPOLY.dbo.TB_INB_POINT_STATISTIC A
				WHERE 1=1
					AND A.LEARNING_YEAR_CODE = @LEARNING_YEAR_CODE
					AND A.TERM_GBN = @TERM_GBN
					AND COURSE_CODE = @LOOP_COURSE_CODE
					AND A.ROUND = @ROUND
				)A
				ORDER BY A.COURSE_CODE ASC , A.POINT DESC, A.RANK ASC
		END
		ELSE
		BEGIN
				SELECT TOP 10 * FROM(
					SELECT DISTINCT
						A.MEMBER_CODE
						, A.RANK AS ROW_NO
						, RANK() OVER (PARTITION BY COURSE_CODE ORDER BY A.RANK ASC) AS RANK
						, A.KR_MEMBER_NAME
						, A.EN_MEMBER_NAME
						, A.POINT
						,  A.CLIENT_EN_NAME
						,  A.LEARNING_YEAR_CODE
						, A.TERM_GBN
						, A.COURSE_CODE
						, A.ROUND
						,(SELECT G2_KEMS.dbo.FN_SYD_GET_LOCALE_VALUE(N_LOCALE_CODE, 'KR') AS CODE_NAME
							FROM G2_LCMS.dbo.TB_MTA_COURSE
						   WHERE  COURSE_CODE = A.COURSE_CODE) AS COURSE_NAME
				FROM G3_LMS_EPOLY.dbo.TB_INB_POINT_STATISTIC A
				WHERE 1=1
				AND A.LEARNING_YEAR_CODE = @LEARNING_YEAR_CODE
				AND A.TERM_GBN = @TERM_GBN
				AND COURSE_CODE = @LOOP_COURSE_CODE
				AND A.ROUND = @ROUND
				AND CLIENT_EN_NAME = @CLIENT_EN_NAME
				)A
				ORDER BY A.COURSE_CODE ASC , A.POINT DESC, A.RANK ASC
		END
	END
	</select>

	<select id="getNewLeadersBoardIncrease" resultMap="tab1,tab2,tab3,tab4,tab5,tab6,tab7,tab8,tab9,tab10,tab11,tab12,tab13,tab14,tab15,tab16,tab17,tab18,tab19,tab20,tab21,tab22,tab23,tab24,tab25">
	DECLARE @TARGET_DATA TABLE (IDX INT IDENTITY(1,1), COURSE_CODE NVARCHAR(50))
	DECLARE @LOOP_IDX INT , @LOOP_COURSE_CODE NVARCHAR(50), @TOTAL_COUNT INT

	DECLARE @LEARNING_YEAR_CODE NVARCHAR(50) = #{learningYearCode};
	DECLARE @TERM_GBN NVARCHAR(50) = #{termGbn};
	DECLARE @PREVIOUS_ROUND INT = #{round}-1;
	DECLARE @CURRENT_ROUND INT = #{round};
	DECLARE @CLIENT_EN_NAME VARCHAR(50) = #{clientEnName};

	IF @PREVIOUS_ROUND = 0
		SET @PREVIOUS_ROUND = 1

	INSERT @TARGET_DATA (COURSE_CODE)
		SELECT COURSE_CODE
		FROM G3_LMS_EPOLY.dbo.TB_INB_POINT_STATISTIC
		GROUP BY COURSE_CODE


	SELECT @TOTAL_COUNT = COUNT(*)
	  FROM @TARGET_DATA

	  SET @LOOP_IDX = 0;

	WHILE @LOOP_IDX &lt; @TOTAL_COUNT
	BEGIN
		SET @LOOP_IDX = @LOOP_IDX + 1

		SELECT @LOOP_COURSE_CODE = COURSE_CODE
		  FROM @TARGET_DATA
		 WHERE IDX = @LOOP_IDX

		IF( @CLIENT_EN_NAME = '' )
		BEGIN
				SELECT TOP (3)
					RANK() OVER (PARTITION BY A1.COURSE_CODE ORDER BY (A1.POINT -  A2.POINT) DESC, A1.POINT DESC) AS RANK
					, A1.POINT -  A2.POINT AS INCREASE_POINT
					, A1.POINT
					, A1.LEARNING_YEAR_CODE
					, A1.TERM_GBN
					, A1.COURSE_CODE
					, A1.KR_MEMBER_NAME
					, A1.EN_MEMBER_NAME
					, A1.POINT
					, A1.MEMBER_CODE
					, A1.CLIENT_EN_NAME
					, (SELECT G2_KEMS.dbo.FN_SYD_GET_LOCALE_VALUE(N_LOCALE_CODE, 'KR') AS CODE_NAME
					   FROM G2_LCMS.dbo.TB_MTA_COURSE
					  WHERE  COURSE_CODE =A1.COURSE_CODE) AS COURSE_NAME

			  FROM (SELECT *
					 FROM G3_LMS_EPOLY.dbo.TB_INB_POINT_STATISTIC A WITH (NOLOCK)
					 WHERE A.LEARNING_YEAR_CODE = @LEARNING_YEAR_CODE
					   AND A.TERM_GBN = @TERM_GBN
					   AND A.ROUND = @CURRENT_ROUND
					   AND A.COURSE_CODE = @LOOP_COURSE_CODE
					) A1
					, (SELECT *
					 FROM G3_LMS_EPOLY.dbo.TB_INB_POINT_STATISTIC B WITH (NOLOCK)
					 WHERE B.LEARNING_YEAR_CODE = @LEARNING_YEAR_CODE
					   AND B.TERM_GBN = @TERM_GBN
					   AND B.ROUND = @PREVIOUS_ROUND
					   AND B.COURSE_CODE = @LOOP_COURSE_CODE
				  ) A2
				WHERE A1.MEMBER_CODE = A2.MEMBER_CODE
				ORDER BY RANK ASC
		END
		ELSE
		BEGIN
				SELECT TOP (3)
					RANK() OVER (PARTITION BY A1.COURSE_CODE ORDER BY (A1.POINT -  A2.POINT) DESC, A1.POINT DESC) AS RANK
					, A1.POINT -  A2.POINT AS INCREASE_POINT
					, A1.POINT
					, A1.LEARNING_YEAR_CODE
					, A1.TERM_GBN
					, A1.COURSE_CODE
					, A1.KR_MEMBER_NAME
					, A1.EN_MEMBER_NAME
					, A1.POINT
					, A1.MEMBER_CODE
					, A1.CLIENT_EN_NAME
					, (SELECT G2_KEMS.dbo.FN_SYD_GET_LOCALE_VALUE(N_LOCALE_CODE, 'KR') AS CODE_NAME
					   FROM G2_LCMS.dbo.TB_MTA_COURSE
					  WHERE  COURSE_CODE =A1.COURSE_CODE) AS COURSE_NAME
				FROM (SELECT *
						FROM G3_LMS_EPOLY.dbo.TB_INB_POINT_STATISTIC A WITH (NOLOCK)
						WHERE A.LEARNING_YEAR_CODE = @LEARNING_YEAR_CODE
						AND A.TERM_GBN = @TERM_GBN
						AND A.ROUND = @CURRENT_ROUND
						AND A.COURSE_CODE = @LOOP_COURSE_CODE
						AND CLIENT_EN_NAME = @CLIENT_EN_NAME
						) A1
						, (SELECT *
						FROM G3_LMS_EPOLY.dbo.TB_INB_POINT_STATISTIC B WITH (NOLOCK)
						WHERE B.LEARNING_YEAR_CODE = @LEARNING_YEAR_CODE
						AND B.TERM_GBN = @TERM_GBN
						AND B.ROUND = @PREVIOUS_ROUND
						AND B.COURSE_CODE = @LOOP_COURSE_CODE
						AND CLIENT_EN_NAME = @CLIENT_EN_NAME
					) A2
				WHERE A1.MEMBER_CODE = A2.MEMBER_CODE

				ORDER BY RANK ASC
			END
	END
	</select>
	<select id="getOldLeadersBoardPoint" resultMap="tab1,tab2,tab3,tab4,tab5,tab6,tab7,tab8,tab9,tab10,tab11,tab12,tab13,tab14,tab15,tab16,tab17,tab18,tab19,tab20,tab21,tab22,tab23,tab24,tab25">
	DECLARE
		@LEARNING_YEAR_CODE NCHAR(4) = #{learningYearCode},
		@SEMESTER_GBN NCHAR(2) = #{termGbn},
		@ROUND NCHAR(1) = #{round},
		@CLIENT_NAME NVARCHAR(20)= #{clientEnName},

		@SRT_WEEK NCHAR(2) = '',
		@END_WEEK NCHAR(2) = '',
		@CLIENT_CODE NVARCHAR(10) = NULL,

		@LOOP_COURSE_CODE NCHAR(3),
		@TOTAL_COUNT INT,
		@LOOP_IDX INT

	DECLARE @TARGET_DATA TABLE(IDX INT IDENTITY(1,1),  COURSE_CODE NVARCHAR(10));

		IF @ROUND = '1'
			SET @SRT_WEEK = '01'
			SET	@END_WEEK = '06'
		IF @ROUND = '2'
			SET @SRT_WEEK = '07'
			SET	@END_WEEK = '12'
		IF @ROUND = '3'
			SET @SRT_WEEK = '13'
			SET	@END_WEEK = '18'
		IF @ROUND = '4'
			SET @SRT_WEEK = '19'
			SET	@END_WEEK = '25'

		IF @CLIENT_NAME = 'dongtan'
			SET @CLIENT_CODE = '0804001'
		IF @CLIENT_NAME = 'gangdong'
			SET @CLIENT_CODE = '1808003'

	INSERT @TARGET_DATA (COURSE_CODE)
		SELECT COURSE_CODE
		FROM G2_LMS_EPOLY.dbo.TB_LRF_RACING_CHART_STATS A
		WHERE LEARNING_YEAR_CODE = #{learningYearCode}
			AND
			  SEMESTER_GBN = #{termGbn}
		GROUP BY COURSE_CODE


	SELECT @TOTAL_COUNT = COUNT(*)
	FROM @TARGET_DATA


	SET @LOOP_IDX = 0

	 WHILE @LOOP_IDX &lt; @TOTAL_COUNT
	 BEGIN
		SET @LOOP_IDX = @LOOP_IDX + 1
		SET @LOOP_COURSE_CODE = (
				SELECT COURSE_CODE
				FROM @TARGET_DATA
				WHERE IDX  = @LOOP_IDX
			)

	SELECT TOP 10
			AA.ROW_NO AS RANK
			, AA.MEMBER_NAME_KR AS KR_MEMBER_NAME
			, AA.MEMBER_NAME_EN AS EN_MEMBER_NAME
			, AA.RESULT_POINT AS POINT
			, AA.MEMBER_CODE
			, AA.CLIENT_NAME AS CLIENT_EN_NAME
			, AA.COURSE_CODE
			, G2_KEMS.dbo.FN_SYD_GET_LOCALE_VALUE(W.N_LOCALE_CODE, 'KR') AS COURSE_NAME
			, @LEARNING_YEAR_CODE AS LEARNING_YEAR_CODE
			, @SEMESTER_GBN AS TERM_GBN
			, @ROUND AS ROUND
	 FROM(
			SELECT RANK() OVER (PARTITION BY COURSE_CODE ORDER BY A.RESULT_POINT DESC, A.CORRECT_RATE DESC, A.CONNECT_RATE DESC, A.PART_RATE DESC) ROW_NO,
				   G2_KEMS.DBO.FN_MBA_GET_MEMBER_NAME_ONLY_LANG_CDOE(A.MEMBER_CODE, 'KR') MEMBER_NAME_KR,
				   G2_KEMS.DBO.FN_MBA_GET_MEMBER_NAME_ONLY_LANG_CDOE(A.MEMBER_CODE, 'EN') MEMBER_NAME_EN,
				   CONVERT(NUMERIC(7, 2), A.RESULT_POINT) RESULT_POINT,
				   A.MEMBER_CODE, G2_KEMS.dbo.FN_CLA_GET_CLIENT_NAME(A.CLIENT_CODE, 'EN', 'N') CLIENT_NAME,
				   A.COURSE_CODE,
				   A.STATS_SEQ, A.STATS_NAME,
				   G2_KEMS.DBO.FN_MBA_GET_MEMBER_NAME(A.MEMBER_CODE, 'EN') MEMBER_NAME,
				   A.CLIENT_CODE,
				   CONVERT(NUMERIC(5, 2), A.PART_RATE) PART_RATE,
				   CONVERT(NUMERIC(5, 2), A.CORRECT_RATE) CORRECT_RATE,
				   CONVERT(NUMERIC(5, 2), A.CONNECT_RATE) CONNECT_RATE
			  FROM (
					SELECT A.MEMBER_CODE,
						   A.STATS_SEQ, A.STATS_NAME,
						   A.CLIENT_CODE, A.COURSE_CODE,
						   SUM(CASE WHEN A.TEST_COUNT &gt; 0 THEN (A.COMPLETE_TEST_COUNT * 1.0) / (A.TEST_COUNT * 1.0) END * 100 * 0.2) PART_RATE,
						   SUM(CASE WHEN A.QUIZ_COUNT &gt; 0 THEN (A.CORRECT_QUIZ_COUNT * 1.0) / (A.QUIZ_COUNT * 1.0) END * 100 * 0.6) CORRECT_RATE,
						   SUM(CASE WHEN A.TOTAL_DAY_COUNT &gt; 0 THEN (A.CONNECT_DAY_COUNT * 1.0) / (A.TOTAL_DAY_COUNT * 1.0) END * 100 * 0.2) CONNECT_RATE,

						   SUM(
							   ISNULL(CASE WHEN A.TEST_COUNT &gt; 0 THEN (A.COMPLETE_TEST_COUNT * 1.0) / (A.TEST_COUNT * 1.0) END * 100 * 0.2, 0) +
							   ISNULL(CASE WHEN A.QUIZ_COUNT &gt; 0 THEN (A.CORRECT_QUIZ_COUNT * 1.0) / (A.QUIZ_COUNT * 1.0) END * 100 * 0.6, 0) +
							   ISNULL(CASE WHEN A.TOTAL_DAY_COUNT &gt; 0 THEN (A.CONNECT_DAY_COUNT * 1.0) / (A.TOTAL_DAY_COUNT * 1.0) END * 100 * 0.2, 0) ) RESULT_POINT
					  FROM (
							SELECT A.MEMBER_CODE, A.STATS_SEQ, Z.STATS_NAME, A.COURSE_CODE,
								   A.CLIENT_CODE,
								   A.WEEK_GBN, ISNULL(SUM(A.TEST_COUNT), 0) TEST_COUNT, ISNULL(SUM(A.COMPLETE_TEST_COUNT), 0) COMPLETE_TEST_COUNT,
								   ISNULL(SUM(A.QUIZ_COUNT), 0) QUIZ_COUNT,
								   ISNULL(SUM(A.CORRECT_QUIZ_COUNT), 0) CORRECT_QUIZ_COUNT,
								   ISNULL(SUM(A.TOTAL_DAY_COUNT), 0) TOTAL_DAY_COUNT,
								   ISNULL(SUM(A.CONNECT_DAY_COUNT), 0) CONNECT_DAY_COUNT
							  FROM G2_LMS_EPOLY.dbo.TB_LRF_RACING_CHART_STATS A     WITH (NOLOCK)
								   INNER JOIN G2_LCMS.DBO.TB_MTA_COURSE CRS     WITH (NOLOCK)
										ON A.COURSE_CODE = CRS.COURSE_CODE
								   INNER JOIN G2_KEMS.dbo.TB_AMB_CAMPUS_CONFIG C     WITH (NOLOCK)
										ON A.CLIENT_CODE = C.CLIENT_CODE
								   INNER JOIN G2_LMS_EPOLY.dbo.TB_LRF_RACING_CHART Z     WITH (NOLOCK)
										ON A.STATS_SEQ = Z.STATS_SEQ
							 WHERE A.LEARNING_YEAR_CODE = @LEARNING_YEAR_CODE
							   AND C.CAMPUS_GBN &lt;&gt; 'TA'
							   AND A.SEMESTER_GBN = @SEMESTER_GBN
							   AND A.WEEK_GBN BETWEEN @SRT_WEEK AND @END_WEEK
							   AND (ISNULL(@CLIENT_CODE,'') = '' OR A.CLIENT_CODE = @CLIENT_CODE)
							   AND A.STATS_SEQ NOT IN (6)
							   AND A.COURSE_CODE = @LOOP_COURSE_CODE
							 GROUP BY A.STATS_SEQ, Z.STATS_NAME, A.CLIENT_CODE, A.WEEK_GBN, A.MEMBER_CODE, A.COURSE_CODE
						   ) A
					  GROUP BY A.STATS_SEQ, A.STATS_NAME, A.CLIENT_CODE, A.MEMBER_CODE, A.COURSE_CODE

					 ) A
					 INNER JOIN G2_KEMS.dbo.TB_AMB_CAMPUS_CONFIG C     WITH (NOLOCK)
						ON A.CLIENT_CODE = C.CLIENT_CODE
					 WHERE C.CAMPUS_GBN &lt;&gt; 'TA'
				) AA
			INNER JOIN G2_KEMS.dbo.TB_MBA_MEMBER B WITH (NOLOCK)
				ON AA.MEMBER_CODE = B.MEMBER_CODE
			LEFT OUTER JOIN G2_LCMS.dbo.TB_MTA_COURSE W WITH (NOLOCK)
				ON AA.COURSE_CODE = W.COURSE_CODE
			LEFT OUTER JOIN G2_KEMS.dbo.TB_SYE_ATTACH_FILE C WITH (NOLOCK)
				ON B.P_ATTACH_FILE_CODE = C.ATTACH_FILE_CODE
	ORDER BY AA.COURSE_CODE, AA.ROW_NO
	END
	</select>
	<select id="getOldLeadersBoardIncrease" resultMap="tab1,tab2,tab3,tab4,tab5,tab6,tab7,tab8,tab9,tab10,tab11,tab12,tab13,tab14,tab15,tab16,tab17,tab18,tab19,tab20,tab21,tab22,tab23,tab24,tab25">
	DECLARE
		@LANG_CODE				NCHAR(2)		= NULL,
		@CLIENT_CODE			NVARCHAR(10)	= NULL,
		@MEMBER_CODE			NVARCHAR(10)	= NULL,
		@ROUND					NCHAR(1)		= #{round},
		@START_WEEK				NCHAR(2)		= NULL,
		@END_WEEK				NCHAR(2)		= NULL,
		@BEFORE_START_WEEK		NCHAR(2)		= NULL,
		@BEFORE_END_WEEK		NCHAR(2)		= NULL,
		@LEARNING_YEAR_CODE		NCHAR(4)		= #{learningYearCode},
		@SEMESTER_GBN			NCHAR(2)		= #{termGbn},
		@COURSE_CODE			INT				= NULL,
		@STATS_SEQ				INT				= NULL,
		@INDIVIDUAL_MEMBER_LIST	NVARCHAR(4000)	= NULL,
		@CLIENT_EN_NAME			NVARCHAR(30)	= #{clientEnName}

		IF(@CLIENT_EN_NAME = 'dongtan')
		BEGIN
			SET @CLIENT_CODE = '0804001'
		END
		ELSE IF(@CLIENT_EN_NAME = 'gangdong')
		BEGIN
			SET @CLIENT_CODE = '1808003'
		END

		IF (@ROUND = '1')
		BEGIN
			SET @START_WEEK = '01'
			SET	@END_WEEK = '06'
			SET @BEFORE_START_WEEK = '01'
			SET @BEFORE_END_WEEK = '06'
		END
		ELSE IF (@ROUND = '2')
		BEGIN
			SET @START_WEEK = '07'
			SET	@END_WEEK = '12'
			SET @BEFORE_START_WEEK = '01'
			SET @BEFORE_END_WEEK = '06'
		END
		ELSE IF (@ROUND = '3')
		BEGIN
			SET @START_WEEK = '13'
			SET	@END_WEEK = '18'
			SET @BEFORE_START_WEEK = '07'
			SET @BEFORE_END_WEEK = '12'
		END
		ELSE IF (@ROUND = '4')
		BEGIN
			SET @START_WEEK = '19'
			SET	@END_WEEK = '25'
			SET @BEFORE_START_WEEK = '13'
			SET @BEFORE_END_WEEK = '18'
		END

		DECLARE @LOOP_COURSE_CODE NCHAR(3),
				@TOTAL_COUNT INT,
				@LOOP_IDX INT
		DECLARE @TARGET_DATA TABLE(IDX INT IDENTITY(1,1),  COURSE_CODE NVARCHAR(10));

		INSERT @TARGET_DATA (COURSE_CODE)
			SELECT COURSE_CODE
			FROM G2_LMS_EPOLY.dbo.TB_LRF_RACING_CHART_STATS A
			WHERE LEARNING_YEAR_CODE = #{learningYearCode}
				AND SEMESTER_GBN = #{termGbn}
			GROUP BY COURSE_CODE


		SELECT @TOTAL_COUNT = COUNT(*)
		FROM @TARGET_DATA

		SET @LOOP_IDX = 0

	 WHILE @LOOP_IDX &lt; @TOTAL_COUNT
	 BEGIN
		SET @LOOP_IDX = @LOOP_IDX + 1
		SET @LOOP_COURSE_CODE = (
				SELECT COURSE_CODE
				FROM @TARGET_DATA
				WHERE IDX  = @LOOP_IDX
			)

	SELECT	TOP 5
		RANK() OVER(PARTITION BY R.COURSE_CODE ORDER BY RESULT_POINT DESC) AS RANK
		, G2_KEMS.DBO.FN_MBA_GET_MEMBER_NAME_ONLY_LANG_CDOE(MEMBER_CODE, 'KR') KR_MEMBER_NAME
		, G2_KEMS.DBO.FN_MBA_GET_MEMBER_NAME_ONLY_LANG_CDOE(MEMBER_CODE, 'EN') EN_MEMBER_NAME
		, CONVERT(NUMERIC(5, 2), RESULT_POINT) INCREASE_POINT
		, MEMBER_CODE
		, G2_KEMS.dbo.FN_CLA_GET_CLIENT_NAME(CLIENT_CODE, 'EN', 'N') CLIENT_EN_NAME
		, R.COURSE_CODE
		, G2_KEMS.DBO.FN_SYD_GET_LOCALE_VALUE(CRS.N_LOCALE_CODE, 'KR') COURSE_NAME
		, B_RESULT AS POINT
	FROM (


			SELECT
					STATS_SEQ, COURSE_CODE, RESULT_POINT,
					MEMBER_CODE, G2_KEMS.DBO.FN_MBA_GET_MEMBER_NAME(MEMBER_CODE, @LANG_CODE) MEMBER_NAME,
					CLIENT_CODE, G2_KEMS.dbo.FN_CLA_GET_CLIENT_NAME(CLIENT_CODE, 'KR', 'N') CLIENT_NAME,
					RANK() OVER (PARTITION BY STATS_SEQ, COURSE_CODE ORDER BY STATS_SEQ, RESULT_POINT DESC) ROW_NO
					,B_RESULT, A_RESULT
			FROM (

					SELECT
							B.RESULT_POINT - A.RESULT_POINT RESULT_POINT,
							B.MEMBER_CODE, B.STATS_SEQ, A.COURSE_CODE, B.CLIENT_CODE
							,B.RESULT_POINT B_RESULT, A.RESULT_POINT A_RESULT
					FROM (


							SELECT RANK() OVER (PARTITION BY COURSE_CODE ORDER BY A.RESULT_POINT DESC, A.CORRECT_RATE DESC, A.CONNECT_RATE DESC, A.PART_RATE DESC) ROW_NO,
									A.MEMBER_CODE,A.COURSE_CODE,
									A.STATS_SEQ, A.STATS_NAME,
									G2_KEMS.DBO.FN_MBA_GET_MEMBER_NAME(A.MEMBER_CODE, 'EN') MEMBER_NAME,
									G2_KEMS.DBO.FN_MBA_GET_MEMBER_NAME_ONLY_LANG_CDOE(A.MEMBER_CODE, 'KR') MEMBER_NAME_KR,
									G2_KEMS.DBO.FN_MBA_GET_MEMBER_NAME_ONLY_LANG_CDOE(A.MEMBER_CODE, 'EN') MEMBER_NAME_EN,
									A.CLIENT_CODE, G2_KEMS.dbo.FN_CLA_GET_CLIENT_NAME(A.CLIENT_CODE, 'EN', 'N') CLIENT_NAME,
									CONVERT(NUMERIC(5, 2), A.PART_RATE) PART_RATE,
									CONVERT(NUMERIC(5, 2), A.CORRECT_RATE) CORRECT_RATE,
									CONVERT(NUMERIC(5, 2), A.CONNECT_RATE) CONNECT_RATE,
									CONVERT(NUMERIC(7, 2), A.RESULT_POINT) RESULT_POINT
								FROM (
									 SELECT A.MEMBER_CODE,
											A.STATS_SEQ, A.STATS_NAME,
											A.CLIENT_CODE, A.COURSE_CODE,
											SUM(CASE WHEN A.TEST_COUNT &gt; 0 THEN (A.COMPLETE_TEST_COUNT * 1.0) / (A.TEST_COUNT * 1.0) END * 100 * 0.2) PART_RATE,
											SUM(CASE WHEN A.QUIZ_COUNT &gt; 0 THEN (A.CORRECT_QUIZ_COUNT * 1.0) / (A.QUIZ_COUNT * 1.0) END * 100 * 0.6) CORRECT_RATE,
											SUM(CASE WHEN A.TOTAL_DAY_COUNT &gt; 0 THEN (A.CONNECT_DAY_COUNT * 1.0) / (A.TOTAL_DAY_COUNT * 1.0) END * 100 * 0.2) CONNECT_RATE,

											SUM(
												ISNULL(CASE WHEN A.TEST_COUNT &gt; 0 THEN (A.COMPLETE_TEST_COUNT * 1.0) / (A.TEST_COUNT * 1.0) END * 100 * 0.2, 0) +
												ISNULL(CASE WHEN A.QUIZ_COUNT &gt; 0 THEN (A.CORRECT_QUIZ_COUNT * 1.0) / (A.QUIZ_COUNT * 1.0) END * 100 * 0.6, 0) +
												ISNULL(CASE WHEN A.TOTAL_DAY_COUNT &gt; 0 THEN (A.CONNECT_DAY_COUNT * 1.0) / (A.TOTAL_DAY_COUNT * 1.0) END * 100 * 0.2, 0) ) RESULT_POINT
										FROM (
											 SELECT A.MEMBER_CODE, A.STATS_SEQ, Z.STATS_NAME, A.COURSE_CODE,
													A.CLIENT_CODE,
													A.WEEK_GBN, ISNULL(SUM(A.TEST_COUNT), 0) TEST_COUNT, ISNULL(SUM(A.COMPLETE_TEST_COUNT), 0) COMPLETE_TEST_COUNT,
													ISNULL(SUM(A.QUIZ_COUNT), 0) QUIZ_COUNT,
													ISNULL(SUM(A.CORRECT_QUIZ_COUNT), 0) CORRECT_QUIZ_COUNT,
													ISNULL(SUM(A.TOTAL_DAY_COUNT), 0) TOTAL_DAY_COUNT,
													ISNULL(SUM(A.CONNECT_DAY_COUNT), 0) CONNECT_DAY_COUNT
												FROM G2_LMS_EPOLY.dbo.TB_LRF_RACING_CHART_STATS A     WITH (NOLOCK)
													INNER JOIN G2_LCMS.DBO.TB_MTA_COURSE CRS     WITH (NOLOCK)
														ON A.COURSE_CODE = CRS.COURSE_CODE
													INNER JOIN G2_KEMS.dbo.TB_AMB_CAMPUS_CONFIG C     WITH (NOLOCK)
														ON A.CLIENT_CODE = C.CLIENT_CODE
													INNER JOIN G2_LMS_EPOLY.dbo.TB_LRF_RACING_CHART Z     WITH (NOLOCK)
														ON A.STATS_SEQ = Z.STATS_SEQ
												WHERE A.LEARNING_YEAR_CODE = @LEARNING_YEAR_CODE
												AND C.CAMPUS_GBN &lt;&gt; 'TA'
												AND A.SEMESTER_GBN = @SEMESTER_GBN
												AND A.WEEK_GBN BETWEEN @BEFORE_START_WEEK AND @BEFORE_END_WEEK
												AND (ISNULL(@CLIENT_CODE,'') = '' OR A.CLIENT_CODE = @CLIENT_CODE)
												AND A.STATS_SEQ NOT IN (6)
												AND A.COURSE_CODE = @LOOP_COURSE_CODE
												GROUP BY A.STATS_SEQ, Z.STATS_NAME, A.CLIENT_CODE, A.WEEK_GBN, A.MEMBER_CODE, A.COURSE_CODE
										) A
										GROUP BY A.STATS_SEQ, A.STATS_NAME, A.CLIENT_CODE, A.MEMBER_CODE, A.COURSE_CODE

								) A
								INNER JOIN G2_KEMS.dbo.TB_AMB_CAMPUS_CONFIG C     WITH (NOLOCK)
								ON A.CLIENT_CODE = C.CLIENT_CODE
								WHERE C.CAMPUS_GBN &lt;&gt; 'TA'


					) A
					INNER JOIN (


								SELECT RANK() OVER (PARTITION BY COURSE_CODE ORDER BY A.RESULT_POINT DESC, A.CORRECT_RATE DESC, A.CONNECT_RATE DESC, A.PART_RATE DESC) ROW_NO,
									A.MEMBER_CODE,A.COURSE_CODE,
									A.STATS_SEQ, A.STATS_NAME,
									G2_KEMS.DBO.FN_MBA_GET_MEMBER_NAME(A.MEMBER_CODE, 'EN') MEMBER_NAME,
									G2_KEMS.DBO.FN_MBA_GET_MEMBER_NAME_ONLY_LANG_CDOE(A.MEMBER_CODE, 'KR') MEMBER_NAME_KR,
									G2_KEMS.DBO.FN_MBA_GET_MEMBER_NAME_ONLY_LANG_CDOE(A.MEMBER_CODE, 'EN') MEMBER_NAME_EN,
									A.CLIENT_CODE, G2_KEMS.dbo.FN_CLA_GET_CLIENT_NAME(A.CLIENT_CODE, 'EN', 'N') CLIENT_NAME,
									CONVERT(NUMERIC(5, 2), A.PART_RATE) PART_RATE,
									CONVERT(NUMERIC(5, 2), A.CORRECT_RATE) CORRECT_RATE,
									CONVERT(NUMERIC(5, 2), A.CONNECT_RATE) CONNECT_RATE,
									CONVERT(NUMERIC(7, 2), A.RESULT_POINT) RESULT_POINT
								FROM (
									 SELECT A.MEMBER_CODE,
											A.STATS_SEQ, A.STATS_NAME,
											A.CLIENT_CODE, A.COURSE_CODE,
											SUM(CASE WHEN A.TEST_COUNT &gt; 0 THEN (A.COMPLETE_TEST_COUNT * 1.0) / (A.TEST_COUNT * 1.0) END * 100 * 0.2) PART_RATE,
											SUM(CASE WHEN A.QUIZ_COUNT &gt; 0 THEN (A.CORRECT_QUIZ_COUNT * 1.0) / (A.QUIZ_COUNT * 1.0) END * 100 * 0.6) CORRECT_RATE,
											SUM(CASE WHEN A.TOTAL_DAY_COUNT &gt; 0 THEN (A.CONNECT_DAY_COUNT * 1.0) / (A.TOTAL_DAY_COUNT * 1.0) END * 100 * 0.2) CONNECT_RATE,

											SUM(
												ISNULL(CASE WHEN A.TEST_COUNT &gt; 0 THEN (A.COMPLETE_TEST_COUNT * 1.0) / (A.TEST_COUNT * 1.0) END * 100 * 0.2, 0) +
												ISNULL(CASE WHEN A.QUIZ_COUNT &gt; 0 THEN (A.CORRECT_QUIZ_COUNT * 1.0) / (A.QUIZ_COUNT * 1.0) END * 100 * 0.6, 0) +
												ISNULL(CASE WHEN A.TOTAL_DAY_COUNT &gt; 0 THEN (A.CONNECT_DAY_COUNT * 1.0) / (A.TOTAL_DAY_COUNT * 1.0) END * 100 * 0.2, 0) ) RESULT_POINT
										FROM (
											 SELECT A.MEMBER_CODE, A.STATS_SEQ, Z.STATS_NAME, A.COURSE_CODE,
													A.CLIENT_CODE,
													A.WEEK_GBN, ISNULL(SUM(A.TEST_COUNT), 0) TEST_COUNT, ISNULL(SUM(A.COMPLETE_TEST_COUNT), 0) COMPLETE_TEST_COUNT,
													ISNULL(SUM(A.QUIZ_COUNT), 0) QUIZ_COUNT,
													ISNULL(SUM(A.CORRECT_QUIZ_COUNT), 0) CORRECT_QUIZ_COUNT,
													ISNULL(SUM(A.TOTAL_DAY_COUNT), 0) TOTAL_DAY_COUNT,
													ISNULL(SUM(A.CONNECT_DAY_COUNT), 0) CONNECT_DAY_COUNT
												FROM G2_LMS_EPOLY.dbo.TB_LRF_RACING_CHART_STATS A     WITH (NOLOCK)
													INNER JOIN G2_LCMS.DBO.TB_MTA_COURSE CRS     WITH (NOLOCK)
														ON A.COURSE_CODE = CRS.COURSE_CODE
													INNER JOIN G2_KEMS.dbo.TB_AMB_CAMPUS_CONFIG C     WITH (NOLOCK)
														ON A.CLIENT_CODE = C.CLIENT_CODE
													INNER JOIN G2_LMS_EPOLY.dbo.TB_LRF_RACING_CHART Z     WITH (NOLOCK)
														ON A.STATS_SEQ = Z.STATS_SEQ
												WHERE A.LEARNING_YEAR_CODE = @LEARNING_YEAR_CODE
												AND C.CAMPUS_GBN &lt;&gt; 'TA'
												AND A.SEMESTER_GBN = @SEMESTER_GBN
												AND A.WEEK_GBN BETWEEN @START_WEEK AND @END_WEEK
												AND (ISNULL(@CLIENT_CODE,'') = '' OR A.CLIENT_CODE = @CLIENT_CODE)
												AND A.STATS_SEQ NOT IN (6)
												GROUP BY A.STATS_SEQ, Z.STATS_NAME, A.CLIENT_CODE, A.WEEK_GBN, A.MEMBER_CODE, A.COURSE_CODE
										) A
										GROUP BY A.STATS_SEQ, A.STATS_NAME, A.CLIENT_CODE, A.MEMBER_CODE, A.COURSE_CODE

								) A
								INNER JOIN G2_KEMS.dbo.TB_AMB_CAMPUS_CONFIG C WITH (NOLOCK) ON A.CLIENT_CODE = C.CLIENT_CODE
								WHERE C.CAMPUS_GBN &lt;&gt; 'TA'


					) B ON A.MEMBER_CODE = B.MEMBER_CODE


			) Z
			WHERE Z.RESULT_POINT IS NOT NULL

	) R
	INNER JOIN G2_LCMS.DBO.TB_MTA_COURSE CRS ON R.COURSE_CODE = CRS.COURSE_CODE
	END
	</select>
</mapper>